priority 10

snippet uns "using namespace" b
using namespace ${1:foo}
${0}
endsnippet

snippet nms "namespace" b
namespace ${1:foo}
{

${VISUAL}$0

} // namespace $1
endsnippet

snippet once "header include guard" b
#ifndef ${1:`!p snip.rv = snip.basename.upper() or "NAME"`}_HAS_BEEN_INCLUDED
#define $1_HAS_BEEN_INCLUDED

${VISUAL}$0

#endif // $1_HAS_BEEN_INCLUDED
endsnippet

snippet ib "#include with brackets" b
#include <${1:iostream}>
${0}
endsnippet

snippet iq "#include with quotes" b
#include "${1:file}.h"
${0}
endsnippet

snippet sep "separator" b
// -----------------------------------------------------------------------------

${0}
endsnippet

snippet mlld "multi-line lambda"
[${1}](${2}) -> ${3}
{
	${4}
};
${0}
endsnippet

snippet tp "template <typename ...>" b
template <typename ${1:T}>
${0}
endsnippet

snippet cout "cout statement" b
std::cout << ${1:${VISUAL}} << std::endl;
${0}
endsnippet

snippet map "std::map" i
std::map<${1:key}, ${2:value}> ${3:var};
${0}
endsnippet

snippet vec "std::vector" i
std::vector<${1:int}> ${2:var};
${0}
endsnippet

snippet set "std::set" i
std::set<${1:int}> ${2:var};
${0}
endsnippet

snippet class "class ..." b
class ${1:`!p snip.rv = snip.basename or "Foo"`}
{
public:
    ${1/(\w+).*/$1/}();
private:
    ${0:// Data}
};
endsnippet

snippet fn "function template" b
${1:void} ${2:functionName}(${3:args})
{
    ${0:// Do the thing}
}
endsnippet

snippet fnsig "function signature" b
${1:void} ${2:functionName}(${3:args});
${0}
endsnippet
